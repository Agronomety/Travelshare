
#region BlogPost Endpoints

//GET: /api/users/secure
app.MapGet("/api/blogposts/secure", [Authorize] async (AppDbContext db) =>
{
    return await db.BlogPosts.ToListAsync();
}).WithName("GetSecureBlogPosts");


// GET: /api/blogposts/{id}
app.MapGet("/api/blogposts/{id}", async (int id, AppDbContext db) =>
{
    var blogPost = await db.BlogPosts
        .Include(bp => bp.User)
        .Include(bp => bp.Tags)
        .Include(bp => bp.Comments)
        .Include(bp => bp.Likes)
        .FirstOrDefaultAsync(bp => bp.Id == id);
    return blogPost is not null ? Results.Ok(blogPost) : Results.NotFound();
}).WithName("GetBlogPostById");

// POST: /api/blogposts
app.MapPost("/api/blogposts", async (HttpContext httpContext, AppDbContext db) =>
{
    var user = httpContext.User;
    if (user.Identity == null || !user.Identity.IsAuthenticated)
    {
        return Results.Unauthorized();
    }

    var form = await httpContext.Request.ReadFormAsync();
    var title = form["title"];
    var content = form["content"];
    var file = form.Files["image"];

    if (string.IsNullOrEmpty(title) || string.IsNullOrEmpty(content))
    {
        return Results.BadRequest("Title and content are required.");
    }

    var userIdClaim = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
    if (string.IsNullOrEmpty(userIdClaim) || !int.TryParse(userIdClaim, out int userId))
    {
        return Results.BadRequest("Invalid user ID.");
    }

    byte[]? imageBytes = null;
    if (file != null)
    {
        using var memoryStream = new MemoryStream();
        await file.CopyToAsync(memoryStream);
        imageBytes = memoryStream.ToArray(); // Convert to byte array
    }

    var blogPost = new BlogPost
    {
        Title = title,
        Content = content,
        UserId = userId,
        CreatedDate = DateTime.UtcNow,
        Image = imageBytes
    };

    db.BlogPosts.Add(blogPost);
    await db.SaveChangesAsync();

    return Results.Created($"/api/blogposts/{blogPost.Id}", blogPost);
}).RequireAuthorization();



// PUT: /api/blogposts/{id}
app.MapPut("/api/blogposts/{id}", async (int id, BlogPost updatedBlogPost, AppDbContext db) =>
{
    var blogPost = await db.BlogPosts.FindAsync(id);
    if (blogPost is null) return Results.NotFound();

    blogPost.Title = updatedBlogPost.Title;
    blogPost.Content = updatedBlogPost.Content;
    blogPost.Tags = updatedBlogPost.Tags;

    await db.SaveChangesAsync();
    return Results.NoContent();
}).WithName("UpdateBlogPost");


app.MapPost("/api/blogposts/{postId}/like", async (int postId, HttpContext httpContext, AppDbContext db) =>
{
    var userId = httpContext.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
    if (userId == null)
    {
        return Results.Unauthorized();
    }

    var post = await db.BlogPosts.Include(p => p.Likes).FirstOrDefaultAsync(p => p.Id == postId);
    if (post == null)
    {
        return Results.NotFound();
    }

    if (!int.TryParse(userId, out int userIdInt))
    {
        return Results.Unauthorized();
    } 

    var existingLike = post.Likes.FirstOrDefault(l => l.UserId == userIdInt);

    if (existingLike != null)
    {
        // Unlike: Remove the like
        post.Likes.Remove(existingLike);
    }
    else
    {
        // Like: Add a new like
        post.Likes.Add(new Like { UserId = userIdInt });
    }

    await db.SaveChangesAsync();
    
    return Results.Ok(new { likeCount = post.Likes.Count });
});


// DELETE: /api/blogposts/{id}
app.MapDelete("/api/blogposts/{id}", async (int id, AppDbContext db) =>
{
    var blogPost = await db.BlogPosts.FindAsync(id);
    if (blogPost is null) return Results.NotFound();

    db.BlogPosts.Remove(blogPost);
    await db.SaveChangesAsync();
    return Results.NoContent();
}).WithName("DeleteBlogPost");

#endregion

#region Comment Endpoints


// GET: /api/blogposts/{postId}/comments
app.MapGet("/api/blogposts/{postId}/comments", async (int postId, AppDbContext db) =>
{
    var comments = await db.Comments
        .Where(c => c.BlogPostId == postId)
        .OrderByDescending(c => c.CreatedDate)
        .Select(c => new
        {
            c.Id,
            c.Content,
            c.CreatedDate,
            c.UserId,
            UserFullName = db.Users
                .Where(u => u.Id == c.UserId)
                .Select(u => u.FirstName + " " + u.LastName)
                .FirstOrDefault() ?? "Unknown User" // Fallback value
        })
        .ToListAsync();

    return Results.Ok(comments);
});



// POST: /api/blogposts/{postId}/comment
app.MapPost("/api/blogposts/{postId}/comment", async (int postId, Comment comment, AppDbContext db, HttpContext httpContext) =>
{
    var userId = httpContext.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
    if (userId == null || !int.TryParse(userId, out int userIdInt))
    {
        return Results.Unauthorized();
    }

    var blogPost = await db.BlogPosts.FindAsync(postId);
    if (blogPost is null)
    {
        return Results.NotFound();
    }

    if (string.IsNullOrWhiteSpace(comment.Content))
    {
        return Results.BadRequest("Comment content cannot be empty.");
    }

    comment.UserId = userIdInt;
    comment.BlogPostId = postId;
    comment.CreatedDate = DateTime.UtcNow;

    db.Comments.Add(comment);
    await db.SaveChangesAsync();

    return Results.Created($"/api/blogposts/{postId}/comments/{comment.Id}", new
    {
        comment.Id,
        comment.Content,
        comment.CreatedDate,
        comment.UserId
    });
});


#endregion

#region User Endpoints

// POST: /api/users
app.MapPost("/api/users", async (User user, AppDbContext db) =>
{
    // Check if a user with the same email already exists
    var existingUser = await db.Users.FirstOrDefaultAsync(u => u.Email == user.Email);
    if (existingUser != null)
    {
        return Results.Conflict("A user with this email already exists.");
    }

    // Hash the password before saving
    user.Password = BCrypt.Net.BCrypt.HashPassword(user.Password);

    db.Users.Add(user);
    await db.SaveChangesAsync();

    return Results.Created($"/api/users/{user.Id}", user);
}).WithName("CreateUser");



// PUT: /api/users/{id}
app.MapPut("/api/users/{id}", async (int id, User updatedUser, AppDbContext db) =>
{
    var user = await db.Users.FindAsync(id);
    if (user is null) return Results.NotFound();

    user.FirstName = updatedUser.FirstName;
    user.LastName = updatedUser.LastName;
    user.Email = updatedUser.Email;
    user.Password = updatedUser.Password;

    await db.SaveChangesAsync();
    return Results.NoContent();
}).WithName("UpdateUser");

// DELETE: /api/users/{id}
app.MapDelete("/api/users/{id}", async (int id, AppDbContext db) =>
{
    var user = await db.Users.FindAsync(id);
    if (user is null) return Results.NotFound();

    db.Users.Remove(user);
    await db.SaveChangesAsync();
    return Results.NoContent();
}).WithName("DeleteUser");


//Login: /api/auth/login
app.MapPost("/api/auth/login", async (LoginRequest loginRequest, AppDbContext db, JwtService jwtService) =>
{
    var user = await db.Users.FirstOrDefaultAsync(u => u.Email == loginRequest.Email);
    
    // Check if the user exists and verify the password
    if (user is null || !BCrypt.Net.BCrypt.Verify(loginRequest.Password, user.Password))
    {
        return Results.Unauthorized();
    }

    var fullName = $"{user.FirstName} {user.LastName}";
    var token = jwtService.GenerateToken(user.Id, fullName);

    return Results.Ok(new { Token = token });
}).WithName("Login");

#endregion


#region Pagination Endpoints
app.MapGet("/api/blogposts", async (AppDbContext db, string? search, string? orderBy, int page = 1, int pageSize = 10) =>
{
    var query = db.BlogPosts
        .Include(b => b.User)
        .Include(b => b.Tags)
        .Include(b => b.Likes)
        .Include(b => b.Comments)
        .AsQueryable();

    // 📜 Pagination
    if (!string.IsNullOrWhiteSpace(search))
    {
        query = query.Where(b =>
            b.Title.Contains(search) ||
            b.User.FirstName.Contains(search) ||
            b.User.LastName.Contains(search) ||
            b.Tags.Any(t => t.Name.Contains(search))
        );
    }

    // 📊 Sorting
    query = orderBy switch
    {
        "likes" => query.OrderByDescending(b => b.Likes.Count),
        "comments" => query.OrderByDescending(b => b.Comments.Count),
        _ => query.OrderByDescending(b => b.CreatedDate)
    };

    // 🔍 Search logic (title, user, tags)
    int totalItems = await query.CountAsync();
    var posts = await query.Skip((page - 1) * pageSize).Take(pageSize).ToListAsync();

    var response = new
    {
        TotalItems = totalItems,
        Page = page,
        PageSize = pageSize,
        TotalPages = (int)Math.Ceiling((double)totalItems / pageSize),
        BlogPosts = posts.Select(p => new
        {
            p.Id,
            p.Title,
            p.Content,
            p.CreatedDate,
            p.UserId,
            ImageBase64 = p.Image != null ? Convert.ToBase64String(p.Image) : null,
            p.Likes,
            p.Comments
        })
    };

    return Results.Ok(response);
});

#endregion



#region Profile

app.MapGet("/api/user/profile", async (HttpContext context, AppDbContext db) =>
{
    var userId = context.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
    if (string.IsNullOrEmpty(userId))
    {
        return Results.Unauthorized();
    }

    var user = await db.Users.FindAsync(int.Parse(userId));
    if (user is null)
    {
        return Results.NotFound();
    }

    return Results.Ok(new { user.FirstName, user.LastName, user.Email });
}).RequireAuthorization();

#endregion
