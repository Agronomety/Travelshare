@page "/profile/edit"
@using System.Net.Http.Headers
@inject HttpClient Http
@inject AuthService AuthService
@inject NavigationManager Navigation

<div class="profile-edit-container">
    <div class="row">
        <div class="col-md-8 mx-auto">
            <div class="card shadow-sm">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h3 class="section-title mb-0">Edit Profile</h3>
                    <button class="btn btn-sm btn-outline-secondary" @onclick="ReturnToProfile">
                        <i class="bi bi-x-lg"></i>
                    </button>
                </div>
                <div class="card-body">
                    @if (isLoading)
                    {
                        <div class="text-center py-5">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p class="mt-3">Loading your profile information...</p>
                        </div>
                    }
                    else
                    {
                        @if (!string.IsNullOrEmpty(successMessage))
                        {
                            <div class="alert alert-success alert-dismissible fade show" role="alert">
                                @successMessage
                                <button type="button" class="btn-close" @onclick="@(() => successMessage = null)"></button>
                            </div>
                        }
                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                                @errorMessage
                                <button type="button" class="btn-close" @onclick="@(() => errorMessage = null)"></button>
                            </div>
                        }

                        <div class="mb-4">
                            <h5 class="mb-3">Personal Information</h5>
                            <div class="mb-3">
                                <label for="firstName" class="form-label">First Name</label>
                                <input type="text" class="form-control" id="firstName" @bind="userData.FirstName" />
                            </div>
                            <div class="mb-3">
                                <label for="lastName" class="form-label">Last Name</label>
                                <input type="text" class="form-control" id="lastName" @bind="userData.LastName" />
                            </div>
                            <div class="mb-3">
                                <label for="email" class="form-label">Email</label>
                                <input type="email" class="form-control" id="email" @bind="userData.Email" />
                            </div>
                            <div class="mt-3">
                                <button @onclick="SaveProfileInfo" class="btn btn-primary" disabled="@isSaving">
                                    @if (isSaving)
                                    {
                                        <span class="spinner-border spinner-border-sm me-1" role="status"></span>
                                        <span>Saving...</span>
                                    }
                                    else
                                    {
                                        <span>Save Changes</span>
                                    }
                                </button>
                            </div>
                        </div>

                        <hr class="my-4" />

                        <div>
                            <h5 class="mb-3">Change Password</h5>
                            <div class="mb-3">
                                <label for="currentPassword" class="form-label">Current Password</label>
                                <input type="password" class="form-control" id="currentPassword" @bind="currentPassword" />
                            </div>
                            <div class="mb-3">
                                <label for="newPassword" class="form-label">New Password</label>
                                <input type="password" class="form-control" id="newPassword" @bind="newPassword" />
                            </div>
                            <div class="mb-3">
                                <label for="confirmPassword" class="form-label">Confirm New Password</label>
                                <input type="password" class="form-control" id="confirmPassword" @bind="confirmPassword" />
                            </div>
                            <div class="mt-3">
                                <button @onclick="ChangePassword" class="btn btn-primary" disabled="@isChangingPassword">
                                    @if (isChangingPassword)
                                    {
                                        <span class="spinner-border spinner-border-sm me-1" role="status"></span>
                                        <span>Updating...</span>
                                    }
                                    else
                                    {
                                        <span>Update Password</span>
                                    }
                                </button>
                            </div>
                        </div>
                    }
                </div>
                <div class="card-footer">
                    <button @onclick="ReturnToProfile" class="btn btn-secondary">
                        <i class="bi bi-arrow-left me-1"></i> Back to Profile
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private UserData userData = new UserData();
    private string currentPassword = "";
    private string newPassword = "";
    private string confirmPassword = "";
    private bool isLoading = true;
    private bool isSaving = false;
    private bool isChangingPassword = false;
    private string successMessage;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        var tokenExists = await AuthService.IsLoggedIn();
        if (!tokenExists)
        {
            Navigation.NavigateTo("/login");
            return;
        }
        await LoadProfileData();
    }

    private async Task LoadProfileData()
    {
        try
        {
            isLoading = true;
            errorMessage = null;

            var token = await AuthService.GetAuthToken();
            if (string.IsNullOrEmpty(token))
            {
                Navigation.NavigateTo("/login");
                return;
            }

            var profileRequest = new HttpRequestMessage(HttpMethod.Get, "/api/user/profile");
            profileRequest.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);
            var profileResponse = await Http.SendAsync(profileRequest);

            if (profileResponse.IsSuccessStatusCode)
            {
                userData = await profileResponse.Content.ReadFromJsonAsync<UserData>();
            }
            else if (profileResponse.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                await AuthService.Logout();
                Navigation.NavigateTo("/login");
            }
            else
            {
                errorMessage = "Failed to load profile data. Please try again later.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
            Console.WriteLine($"Profile error: {ex}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task SaveProfileInfo()
    {
        try
        {
            isSaving = true;
            errorMessage = null;
            successMessage = null;

            var token = await AuthService.GetAuthToken();
            if (string.IsNullOrEmpty(token))
            {
                Navigation.NavigateTo("/login");
                return;
            }

            
            bool hasErrors = false;

            
            var firstNameForm = new MultipartFormDataContent();
            firstNameForm.Add(new StringContent(userData.FirstName), "firstName");
            var firstNameRequest = new HttpRequestMessage(HttpMethod.Put, "api/user/firstName");
            firstNameRequest.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);
            firstNameRequest.Content = firstNameForm;
            var firstNameResponse = await Http.SendAsync(firstNameRequest);
            if (!firstNameResponse.IsSuccessStatusCode) hasErrors = true;

           
            var lastNameForm = new MultipartFormDataContent();
            lastNameForm.Add(new StringContent(userData.LastName), "lastName");
            var lastNameRequest = new HttpRequestMessage(HttpMethod.Put, "api/user/lastName");
            lastNameRequest.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);
            lastNameRequest.Content = lastNameForm;
            var lastNameResponse = await Http.SendAsync(lastNameRequest);
            if (!lastNameResponse.IsSuccessStatusCode) hasErrors = true;

            
            var emailForm = new MultipartFormDataContent();
            emailForm.Add(new StringContent(userData.Email), "email");
            var emailRequest = new HttpRequestMessage(HttpMethod.Put, "api/user/email");
            emailRequest.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);
            emailRequest.Content = emailForm;
            var emailResponse = await Http.SendAsync(emailRequest);
            if (!emailResponse.IsSuccessStatusCode) hasErrors = true;

            if (hasErrors)
            {
                errorMessage = "There was a problem updating some of your information. Please try again.";
            }
            else
            {
                successMessage = "Profile information updated successfully!";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
            Console.WriteLine($"Update profile error: {ex}");
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    private async Task ChangePassword()
    {
        try
        {
            if (string.IsNullOrEmpty(currentPassword) || string.IsNullOrEmpty(newPassword) || string.IsNullOrEmpty(confirmPassword))
            {
                errorMessage = "All password fields are required.";
                return;
            }

            if (newPassword != confirmPassword)
            {
                errorMessage = "New password and confirm password do not match.";
                return;
            }

            isChangingPassword = true;
            errorMessage = null;
            successMessage = null;

            var token = await AuthService.GetAuthToken();
            if (string.IsNullOrEmpty(token))
            {
                Navigation.NavigateTo("/login");
                return;
            }

            var passwordForm = new MultipartFormDataContent();
            passwordForm.Add(new StringContent(currentPassword), "currentPassword");
            passwordForm.Add(new StringContent(newPassword), "newPassword");

            var passwordRequest = new HttpRequestMessage(HttpMethod.Put, "api/user/password");
            passwordRequest.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);
            passwordRequest.Content = passwordForm;
            var passwordResponse = await Http.SendAsync(passwordRequest);

            if (passwordResponse.IsSuccessStatusCode)
            {
                successMessage = "Password updated successfully!";
                currentPassword = "";
                newPassword = "";
                confirmPassword = "";
            }
            else
            {
                var responseContent = await passwordResponse.Content.ReadAsStringAsync();
                errorMessage = responseContent;
                if (string.IsNullOrEmpty(errorMessage))
                {
                    errorMessage = "Failed to update password. Please try again.";
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
            Console.WriteLine($"Password update error: {ex}");
        }
        finally
        {
            isChangingPassword = false;
            StateHasChanged();
        }
    }

    private void ReturnToProfile()
    {
        Navigation.NavigateTo("/profile");
    }

    private class UserData
    {
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string Email { get; set; }
    }
}