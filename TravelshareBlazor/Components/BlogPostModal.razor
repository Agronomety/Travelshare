@namespace TravelshareBlazor.Components
@using System.Threading.Tasks

<div class="modal-backdrop @(_isVisible ? "show" : "d-none")" @onclick="CloseModal"></div>
<div class="modal fade @(_isVisible ? "show d-block" : "d-none")" tabindex="-1" role="dialog" @onclick:stopPropagation>
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                @if (BlogPost != null)
                {
                    <h5 class="modal-title">@BlogPost.Title</h5>
                }
                <button type="button" class="btn-close" @onclick="CloseModal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                @if (BlogPost != null)
                {
                    <div class="blog-post-modal">
                        @if (!string.IsNullOrEmpty(BlogPost.ImageBase64))
                        {
                            <img src="data:image/png;base64,@BlogPost.ImageBase64" class="img-fluid mb-4 rounded" alt="Blog Image" />
                        }
                        <div class="blog-content">
                            <div class="d-flex justify-content-between align-items-center mb-3">
                                <div class="stats">
                                    <span class="me-3">
                                        <i class="far fa-heart me-1"></i>
                                        @(BlogPost.Likes?.Count ?? 0)
                                    </span>
                                    <span>
                                        <i class="far fa-comment me-1"></i>
                                        @(BlogPost.Comments?.Count ?? 0)
                                    </span>
                                </div>
                                <div class="post-date text-muted small">
                                    <i class="far fa-calendar me-1"></i>
                                    @FormatDate(BlogPost.CreatedDate)
                                </div>
                            </div>
                            <div class="content-text">
                                @((MarkupString)FormatContent(BlogPost.Content ?? ""))
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <div class="text-center my-5">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public BlogPost BlogPost { get; set; }

    [Parameter]
    public EventCallback OnClose { get; set; }

    private bool _isVisible = false;

    public void Show()
    {
        _isVisible = true;
        StateHasChanged();
    }

    public void Hide()
    {
        _isVisible = false;
        StateHasChanged();
    }

    private async Task CloseModal()
    {
        _isVisible = false;
        await OnClose.InvokeAsync();
    }

    private string FormatContent(string content)
    {
        if (string.IsNullOrEmpty(content)) return "";

        var paragraphs = content.Split("\n\n", StringSplitOptions.RemoveEmptyEntries);
        return string.Join("", paragraphs.Select(p => $"<p>{p}</p>"));
    }

    private string FormatDate(DateTime date)
    {
        var timeDiff = DateTime.Now - date;

        if (timeDiff.TotalDays < 1) return "Today";
        if (timeDiff.TotalDays < 2) return "Yesterday";
        if (timeDiff.TotalDays < 7) return $"{(int)timeDiff.TotalDays} days ago";

        return date.ToString("MMM d, yyyy");
    }
}

<style>
    .modal-backdrop.show {
        opacity: 0.5;
        display: block;
    }

    .blog-post-modal .content-text {
        line-height: 1.8;
    }
</style>
