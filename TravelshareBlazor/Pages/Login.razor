@page "/login"
@using System.ComponentModel.DataAnnotations
@inject AuthService AuthService
@inject NavigationManager Navigation

<div class="login-container">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-6 col-lg-5">
                <div class="card shadow login-card">
                    <div class="card-body p-4">
                        <div class="text-center mb-4">
                            <i class="fas fa-globe text-primary mb-3" style="font-size: 3rem;"></i>
                            <h2 class="fw-bold">Welcome Back</h2>
                            <p class="text-muted">Sign in to continue to Explore The World</p>
                        </div>

                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger d-flex align-items-center" role="alert">
                                <i class="fas fa-exclamation-circle me-2"></i>
                                <div>@errorMessage</div>
                            </div>
                        }

                        <EditForm Model="loginModel" OnValidSubmit="HandleLogin" class="login-form">
                            <DataAnnotationsValidator />
                            <ValidationSummary class="text-danger" />

                            <div class="mb-3">
                                <label class="form-label">Email Address</label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="fas fa-envelope"></i></span>
                                    <InputText @bind-Value="loginModel.Email" class="form-control" placeholder="Enter your email" />
                                </div>
                                <ValidationMessage For="@(() => loginModel.Email)" class="text-danger" />
                            </div>

                            <div class="mb-3">
                                <div class="d-flex justify-content-between align-items-center">
                                    <label class="form-label">Password</label>
                                    <a href="/forgot-password" class="small text-primary">Forgot password?</a>
                                </div>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="fas fa-lock"></i></span>
                                    <InputText @bind-Value="loginModel.Password" type="password" class="form-control" placeholder="Enter your password" />
                                </div>
                                <ValidationMessage For="@(() => loginModel.Password)" class="text-danger" />
                            </div>

                            <div class="mb-3 form-check">
                                <InputCheckbox id="rememberMe" @bind-Value="loginModel.RememberMe" class="form-check-input" />
                                <label class="form-check-label" for="rememberMe">Remember me</label>
                            </div>

                            <div class="d-grid gap-2">
                                <button type="submit" class="btn btn-primary btn-lg" disabled="@isLoading">
                                    @if (isLoading)
                                    {
                                        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                        <span>Signing in...</span>
                                    }
                                    else
                                    {
                                        <span>Sign In</span>
                                    }
                                </button>
                            </div>
                        </EditForm>

                        <div class="text-center mt-4">
                            <p class="mb-0">Don't have an account? <a href="/register" class="text-primary fw-bold">Sign Up</a></p>
                        </div>
                    </div>
                </div>

                <div class="text-center mt-3 text-muted small">
                    <p>By signing in, you agree to our <a href="/terms" class="text-muted">Terms of Service</a> and <a href="/privacy" class="text-muted">Privacy Policy</a>.</p>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new LoginModel();
    private string errorMessage = "";
    private bool isLoading = false;

    private async Task HandleLogin()
    {
        errorMessage = "";
        isLoading = true;
        
        try
        {
            var success = await AuthService.Login(loginModel.Email, loginModel.Password);
            if (success)
            {
                await Task.Delay(100);  // Delay to allow the auth cookie to be set
                Navigation.NavigateTo("/", forceLoad: true);
            }
            else
            {
                errorMessage = "Invalid email or password. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred during login. Please try again later.";
            Console.WriteLine($"Login error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email format")]
        public string Email { get; set; }
        
        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; }
        
        public bool RememberMe { get; set; }
    }
}

<style>
    .login-container {
        padding: 4rem 0;
        background-color: #f8f9fa;
        min-height: calc(100vh - 80px); /* Adjust based on your navbar height */
    }

    .login-card {
        border-radius: 8px;
        border: none;
    }

    .login-form .input-group-text {
        background-color: transparent;
        border-right: none;
    }

    .login-form .form-control {
        border-left: none;
    }

    .login-form .input-group:focus-within {
        box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
        border-radius: 0.25rem;
    }

    .login-form .input-group:focus-within .input-group-text,
    .login-form .input-group:focus-within .form-control {
        border-color: #86b7fe;
    }

    /* Remove default focus styles for elements inside the input group */
    .login-form .input-group:focus-within .input-group-text:focus,
    .login-form .input-group:focus-within .form-control:focus {
        box-shadow: none;
    }
</style>