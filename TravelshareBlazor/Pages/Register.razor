@page "/register"
@inject HttpClient Http
@inject NavigationManager Navigation
@using System.ComponentModel.DataAnnotations

<div class="register-container">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-6 col-lg-5">
                <div class="card shadow register-card">
                    <div class="card-body p-4">
                        <div class="text-center mb-4">
                            <i class="fas fa-user-plus text-primary mb-3" style="font-size: 3rem;"></i>
                            <h2 class="fw-bold">Create Account</h2>
                            <p class="text-muted">Join us to Explore The World</p>
                        </div>

                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger d-flex align-items-center" role="alert">
                                <i class="fas fa-exclamation-circle me-2"></i>
                                <div>@errorMessage</div>
                            </div>
                        }

                        <EditForm Model="newUserModel" OnValidSubmit="HandleValidSubmit" class="register-form">
                            <DataAnnotationsValidator />
                            <ValidationSummary class="text-danger" />

                            <div class="mb-3">
                                <label class="form-label">First Name</label>
                                <InputText @bind-Value="newUserModel.FirstName" class="form-control" placeholder="Enter your first name" />
                                <ValidationMessage For="@(() => newUserModel.FirstName)" class="text-danger" />
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Last Name</label>
                                <InputText @bind-Value="newUserModel.LastName" class="form-control" placeholder="Enter your last name" />
                                <ValidationMessage For="@(() => newUserModel.LastName)" class="text-danger" />
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Email Address</label>
                                <InputText @bind-Value="newUserModel.Email" class="form-control" placeholder="Enter your email" />
                                <ValidationMessage For="@(() => newUserModel.Email)" class="text-danger" />
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Password</label>
                                <InputText @bind-Value="newUserModel.Password" type="password" class="form-control" placeholder="Enter your password" />
                                <ValidationMessage For="@(() => newUserModel.Password)" class="text-danger" />
                            </div>

                            <div class="d-grid gap-2">
                                <button type="submit" class="btn btn-primary btn-lg" disabled="@isLoading">
                                    @if (isLoading)
                                    {
                                        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                        <span>Registering...</span>
                                    }
                                    else
                                    {
                                        <span>Sign Up</span>
                                    }
                                </button>
                            </div>
                        </EditForm>

                        <div class="text-center mt-4">
                            <p class="mb-0">Already have an account? <a href="/login" class="text-primary fw-bold">Sign In</a></p>
                        </div>
                    </div>
                </div>

                <div class="text-center mt-3 text-muted small">
                    <p>By signing up, you agree to our <a href="/terms" class="text-muted">Terms of Service</a> and <a href="/privacy" class="text-muted">Privacy Policy</a>.</p>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private User newUserModel = new User();
    private string errorMessage = string.Empty;
    private bool isLoading = false;

    private async Task HandleValidSubmit()
    {
        errorMessage = string.Empty;
        isLoading = true;

        try
        {
            var response = await Http.PostAsJsonAsync("/api/users", newUserModel);
            if (response.IsSuccessStatusCode)
            {
                Navigation.NavigateTo("/");
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.Conflict)
            {
                errorMessage = "A user with this email already exists.";
            }
            else
            {
                var errorMessageFromServer = await response.Content.ReadAsStringAsync();
                errorMessage = $"Registration failed: {response.StatusCode} - {errorMessageFromServer}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred during registration. Please try again later.";
            Console.WriteLine($"Registration error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    public class User
    {
        [Required(ErrorMessage = "First name is required")]
        public string FirstName { get; set; }

        [Required(ErrorMessage = "Last name is required")]
        public string LastName { get; set; }

        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email format")]
        public string Email { get; set; }

        [Required(ErrorMessage = "Password is required")]
        [MinLength(6, ErrorMessage = "Password must be at least 6 characters long")]
        public string Password { get; set; }
    }
}

<style>
    .register-container {
        padding: 4rem 0;
        background-color: #f8f9fa;
        min-height: calc(100vh - 80px); /* Adjust based on your navbar height */
    }

    .register-card {
        border-radius: 8px;
        border: none;
    }

    .register-form .input-group-text {
        background-color: transparent;
        border-right: none;
    }

    .register-form .form-control {
        border-left: none;
    }

    .register-form .input-group:focus-within {
        box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
        border-radius: 0.25rem;
    }

    .register-form .input-group:focus-within .input-group-text,
    .register-form .input-group:focus-within .form-control {
        border-color: #86b7fe;
    }

    .register-form .input-group:focus-within .input-group-text:focus,
    .register-form .input-group:focus-within .form-control:focus {
        box-shadow: none;
    }
</style>
