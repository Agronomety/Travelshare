@page "/profile"
@using System.Net.Http.Headers
@inject HttpClient Http
@inject AuthService AuthService
@inject NavigationManager Navigation

<div class="proflie-container">
    <div class="row">
        <div class="col-md-8 mx-auto">
            <div class="card shadow-sm">
                <div class="card-header">
                    <h3 class="section-title mb-0">My Profile</h3>
                </div>
                <div class="card-body">
                    @if (user != null)
                    {
                        <div class="row mb-4">
                            <div class="col-md-4 d-flex justify-content-center align-items-start mb-3 mb-md-0">
                                <div class="rounded-circle bg-light d-flex justify-content-center align-items-center" style="width: 150px; height: 150px;">
                                    <i class="bi bi-person" style="font-size: 4rem; color: var(--primary-color);"></i>
                                </div>
                            </div>
                            <div class="col-md-8">
                                <h4 class="mb-3">@user.FirstName @user.LastName</h4>
                                <p class="mb-2"><i class="bi bi-envelope me-2"></i> @user.Email</p>
                                <p class="text-muted">Travel enthusiast & blogger</p>
                                <div class="d-flex mt-4">
                                    <button @onclick="EditProfile" class="btn btn-outline-primary me-2">
                                        <i class="bi bi-pencil me-1"></i> Edit Profile
                                    </button>
                                    <button @onclick="LogOut" class="btn btn-outline-secondary">
                                        <i class="bi bi-box-arrow-right me-1"></i> Log Out
                                    </button>
                                </div>
                            </div>
                        </div>

                        <div class="profile-stats mt-4">
                            <h5 class="mb-3">Your Activity</h5>
                            <div class="row text-center">
                                <div class="col-4">
                                    <div class="p-3 rounded bg-light">
                                        <h3 class="mb-0 text-primary">@(userStats?.PostCount ?? 0)</h3>
                                        <span class="text-muted">Posts</span>
                                    </div>
                                </div>
                                <div class="col-4">
                                    <div class="p-3 rounded bg-light">
                                        <h3 class="mb-0 text-primary">@(userStats?.CommentsCount ?? 0)</h3>
                                        <span class="text-muted">Comments</span>
                                    </div>
                                </div>
                                <div class="col-4">
                                    <div class="p-3 rounded bg-light">
                                        <h3 class="mb-0 text-primary">@(userStats?.LikesCount ?? 0)</h3>
                                        <span class="text-muted">Likes</span>
                                    </div>
                                </div>
                            </div>
                        </div>

                        @if (isLoading)
                        {
                            <div class="text-center my-4">
                                <div class="spinner-border text-primary" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                            </div>
                        }
                        else if (errorMessage != null)
                        {
                            <div class="alert alert-danger mt-3">@errorMessage</div>
                        }
                    }
                    else
                    {
                        <div class="text-center py-5">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p class="mt-3">Loading your profile information...</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private User user;
    private UserStats userStats;
    private bool isInitialized;
    private bool isLoading;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        var tokenExists = await AuthService.IsLoggedIn();
        if (!tokenExists)
        {
            Navigation.NavigateTo("/login");
            return;
        }
        await LoadProfileData();
    }

    private async Task LoadProfileData()
    {
        try
        {
            isLoading = true;
            errorMessage = null;

            var token = await AuthService.GetAuthToken();
            if (string.IsNullOrEmpty(token))
            {
                Console.WriteLine("No token found: Redirecting to login...");
                Navigation.NavigateTo("/login");
                return;
            }

            var profileRequest = new HttpRequestMessage(HttpMethod.Get, "/api/user/profile");
            profileRequest.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);
            var profileResponse = await Http.SendAsync(profileRequest);

            if (profileResponse.IsSuccessStatusCode)
            {
                user = await profileResponse.Content.ReadFromJsonAsync<User>();
                var statsRequest = new HttpRequestMessage(HttpMethod.Get, "/api/user/stats");
                statsRequest.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);
                var statsResponse = await Http.SendAsync(statsRequest);

                if (statsResponse.IsSuccessStatusCode)
                {
                    userStats = await statsResponse.Content.ReadFromJsonAsync<UserStats>();
                }
                else
                {
                    userStats = new UserStats { PostCount = 0, CommentsCount = 0, LikesCount = 0 };
                }
            }
            else if (profileResponse.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                await AuthService.Logout();
                Navigation.NavigateTo("/login");
            }
            else
            {
                errorMessage = "Failed to load profile data. Please try again later.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
            Console.WriteLine($"Profile error: {ex}");
        }
        finally
        {
            isLoading = false;
            isInitialized = true;
            StateHasChanged();
        }
    }

    private void EditProfile() => Navigation.NavigateTo("/profile/edit");

    private async Task LogOut()
    {
        await AuthService.Logout();
        Navigation.NavigateTo("/");
    }

    private class User
    {
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string Email { get; set; }
    }

    private class UserStats
    {
        public int PostCount { get; set; }
        public int CommentsCount { get; set; }
        public int LikesCount { get; set; }
    }
}